아래는 Orbbec Femto Mega 카메라를 Windows 환경에서 사용하는 **최종 가이드**입니다. 기존 내용에 더해, CMake/make/nmake/MSBuild 등 빌드 도구 인식 에러와 관련한 해결 방법 및 설치·실행 과정에서 발생할 수 있는 잠재적인 문제와 해결책을 자세히 추가했습니다. **이 문서 한 편으로 설치부터 빌드, 실행까지 문제없이 진행**할 수 있도록 정리했으니 참고하시기 바랍니다.

---
# Orbbec Femto Mega를 Windows에서 활용하여 컬러, 뎁스, 포인트 클라우드 스트리밍하기

**Orbbec Femto Mega**는 1MP 뎁스 센서와 4K 컬러 카메라를 갖춘 Time-of-Flight 방식의 깊이 카메라입니다. 컬러 이미지와 깊이 맵을 제공하며, 3D 포인트 클라우드도 생성할 수 있습니다. Windows 환경에서 Orbbec 오피셜 SDK(파이썬 바인딩과 C/C++ API 제공)를 통해 이러한 스트림을 처리할 수 있습니다.

## 1. Windows에서 Orbbec SDK 다운로드 및 설치

### 1.1 다운로드 경로

1. **GitHub 레포지토리**: [OrbbecSDK_v2](https://github.com/orbbec/OrbbecSDK_v2?tab=readme-ov-file)
   - SDK 구조와 예제, 소스 코드(일부 Python 바인딩 등)를 확인할 수 있습니다.
2. **SDK 다운로드 (릴리즈 페이지)**: [OrbbecSDK_v2 Releases](https://github.com/orbbec/OrbbecSDK_v2/releases)
   - Windows용 최신 바이너리(예: `.exe` 또는 `.zip` 형태)를 받을 수 있습니다.
3. **공식 API Reference**: [Orbbec SDK v2 문서](https://orbbec.github.io/docs/OrbbecSDKv2/index.html)
   - C++/Python 함수, 클래스에 대한 자세한 레퍼런스를 제공합니다.

### 1.2 설치 준비

- **Windows 버전**: 일반적으로 Windows 10 이상 권장. USB 3.0 포트가 필요합니다(전원이나 대역폭 문제 방지).
- **개발 환경**: Python(>= 3.6) 또는 C++(Visual Studio 2019/2022 등). Python 사용 시 OpenCV, numpy 등이 필요합니다.
- **추가 권장 패키지** (Python):
  ```bash
  pip install opencv-python numpy
  ```
- **CMake 등 빌드 도구**: Python SDK(파이썬 바인딩)나 C++ 예제를 빌드하려면 CMake와 컴파일러가 필요합니다.
  - Windows에서는 보통 [CMake 공식 웹사이트](https://cmake.org/download/)에서 `.msi` 버전을 설치하거나, Visual Studio Installer에서 "Desktop development with C++" 항목을 추가 설치합니다.
  - CMake 설치 시 “Add CMake to the system PATH” 옵션을 꼭 체크하세요.

### 1.3 설치 절차

1. **SDK 패키지 다운로드**
   - 위 릴리즈 페이지에서 Windows 용 SDK 패키지를 찾습니다. 예: `OrbbecSDK_Windows_x64_vX.X.X.exe` 또는 `.zip`.
2. **설치(또는 압축 해제)**
   - `.exe` 형식이면 실행 후 설치 경로를 지정하면 됩니다. 기본적으로 `C:\Program Files\Orbbec\OrbbecSDK` 같은 경로에 설치됩니다.
   - `.zip` 형식이면, 원하는 경로에 압축을 풉니다. SDK 폴더 안에는 `include`, `lib`, `bin`, `tools` 등이 포함됩니다.
3. **Orbbec Viewer(테스트 툴) 확인**
   - `tools` 폴더(또는 설치 경로)에 `OrbbecViewer.exe`가 있을 수 있습니다. 이것으로 카메라 연결을 테스트할 수 있습니다. 컬러/뎁스가 정상적으로 동작하는지 먼저 확인하는 것이 좋습니다.
4. **환경 변수 설정** (선택)
   - C++로 개발 시, Visual Studio 프로젝트에서 SDK 헤더(`include` 경로)와 라이브러리(`lib` 경로`)를 추가해야 합니다.
   - Python에서 `pyorbbecsdk`를 사용하려면, SDK의 `bin` 폴더(혹은 `.dll`가 있는 폴더)가 `PATH`에 포함되어 있어야 `.dll`을 찾을 수 있습니다.
   - `시스템 속성 > 고급 > 환경 변수`에서 `Path`에 `C:\Program Files\Orbbec\OrbbecSDK\bin` 등을 추가할 수 있습니다.
5. **(메타데이터 사용 시) 레지스트리 패치**
   - Femto Mega를 UVC로 사용할 때 타임스탬프 등 메타데이터를 가져오려면, SDK 내 `.reg` 스크립트를 실행해 Windows 레지스트리를 수정해야 할 수 있습니다. `doc`나 `tools` 폴더 내에 `metadata_enable.reg` 등이 있는지 확인 후, 관리자 권한으로 적용하세요.

### 1.4 Python SDK(pyorbbecsdk) 빌드/설치 (필요 시)

Orbbec에서 **Python 바인딩**(`pyorbbecsdk`)을 제공하지만, 사전 컴파일된 바이너리가 없으면 직접 빌드해야 합니다.

1. [pyorbbecsdk GitHub](https://github.com/orbbec/pyorbbecsdk)를 클론합니다.
2. Visual Studio, CMake, Python dev 패키지 등을 설치해 C++ 확장 모듈을 빌드할 준비를 합니다.
3. 다음 예시 절차로 설치:
   ```bash
   cd pyorbbecsdk
   python -m venv ./venv
   # Windows PowerShell 기준:  .\venv\Scripts\activate  (Git Bash일 땐 source venv/bin/activate)
   pip install -r requirements.txt
   mkdir build
   cd build
   # pybind11-config --cmakedir 출력값이 올바른지 확인
   cmake -Dpybind11_DIR="경로" ..
   # 예) cmake -Dpybind11_DIR=$(pybind11-config --cmakedir) .. (PowerShell 구문)
   # Windows에선 make가 아니라 다음처럼 빌드
   cmake --build . --config Release
   cmake --install .
   ```

- **중요**: Windows에서는 기본적으로 `make` 명령이 없습니다. CMake가 Visual Studio 솔루션(.sln)을 생성하면, `make -j4` 대신 아래 명령을 사용할 수 있습니다:
  ```bash
  cmake --build . --config Release
  ```
  또는, Visual Studio에서 `.sln` 파일을 열고 빌드해도 됩니다.
- 만약 `nmake`를 쓰려면 Visual Studio 개발자 명령 프롬프트(Developer Command Prompt)에서 `NMake Makefiles` 제너레이터를 지정해야 하고, `msbuild`를 쓰려면 MSBuild가 설치된 환경에서 PATH를 설정해줘야 합니다.
- CMake 명령어 실행 시 `cmake` 자체가 인식되지 않는다면, **CMake가 설치·PATH 등록 안 됨**이 원인이므로 [CMake 공식 설치](https://cmake.org/download/)나 Visual Studio Installer를 통해 설치하고, 설치 후 터미널을 재시작하세요.
- 파워쉘/VSCode 터미널에서 `cmake --version`, `nmake /?`, `msbuild /?` 등으로 빌드 도구가 인식되는지 먼저 확인하는 것이 좋습니다.

### 1.5 카메라 연결

- **USB 3.0**: Femto Mega를 USB 케이블로 PC에 연결합니다. 별도 드라이버 없이 Windows에서 UVC 카메라로 인식됩니다.
- **이더넷(PoE)**: Femto Mega를 PoE 스위치나 이더넷 포트에 연결할 수 있습니다. 이 경우 네트워크 구성(IP 할당 등)이 필요합니다. Orbbec Viewer나 SDK로 장치를 검색할 수 있어야 합니다.

**정리**: 위 과정을 마치고 Femto Mega를 연결하면, API(Python/C++)를 통해 컬러·뎁스 스트림에 접근할 수 있습니다.

---
## 2. Python에서 컬러와 뎁스 스트리밍 (OpenCV VideoCapture 유사 방식)

다음 예제 코드는 `pyorbbecsdk`가 제대로 설치·인식된 뒤, Femto Mega로부터 컬러/뎁스 프레임을 받아서 시각화하는 최소 예시입니다:

```python
import cv2
import numpy as np
from pyorbbecsdk import Pipeline

# Initialize pipeline and start streaming (defaults to color + depth streams)
pipeline = Pipeline()
pipeline.start()

try:
    while True:
        frames = pipeline.wait_for_frames(100)
        if frames is None:
            continue
        color_frame = frames.get_color_frame()
        depth_frame = frames.get_depth_frame()
        if color_frame is None or depth_frame is None:
            continue

        w, h = color_frame.get_width(), color_frame.get_height()
        color_data = np.frombuffer(color_frame.get_data(), dtype=np.uint8)
        color_img = color_data.reshape((h, w, 3))

        w_d, h_d = depth_frame.get_width(), depth_frame.get_height()
        depth_data = np.frombuffer(depth_frame.get_data(), dtype=np.uint16)
        depth_map = depth_data.reshape((h_d, w_d))

        depth_vis = cv2.normalize(depth_map, None, 0, 255, cv2.NORM_MINMAX, cv2.CV_8U)
        depth_vis = cv2.applyColorMap(depth_vis, cv2.COLORMAP_JET)

        cv2.imshow("Orbbec Color", color_img)
        cv2.imshow("Orbbec Depth", depth_vis)
        if cv2.waitKey(1) == 27:  # ESC
            break
finally:
    pipeline.stop()
    cv2.destroyAllWindows()
```

- `pipeline.start()`가 성공적으로 호출되면 컬러·뎁스 스트림이 켜집니다. (`Config`를 지정해 해상도/FPS 변경 가능)
- `wait_for_frames()`로 받는 `frameset`에서 컬러와 뎁스 프레임을 각각 꺼내 NumPy로 변환 후 표시합니다.
- ESC 키로 종료합니다.

이렇듯 OpenCV의 `VideoCapture`와 비슷하게 다루면서도, 뎁스 프레임 처리가 가능하다는 장점이 있습니다.

---
## 3. C/C++로 액세스 (고성능 처리)

고해상도(예: 4K 컬러) 실시간 처리가 필요한 경우, Python보다 C++로 접근하면 더 나은 성능을 낼 수 있습니다. Orbbec SDK가 제공하는 C++ API를 통해 아래와 같이 컬러·뎁스를 받아볼 수 있습니다:

```cpp
#include <ob_api.h>
#include <opencv2/opencv.hpp>

// ...

ob::Pipeline pipeline;
pipeline.start();

while (true) {
    std::shared_ptr<ob::FrameSet> frameSet = pipeline.waitForFrames(100);
    if (!frameSet)
        continue;
    auto colorFrame = frameSet->colorFrame();
    auto depthFrame = frameSet->depthFrame();
    if (!colorFrame || !depthFrame)
        continue;

    // 해상도, raw data 포인터를 얻어 OpenCV Mat 생성
    int cw = colorFrame->width();
    int ch = colorFrame->height();
    const uint8_t* colorData = (const uint8_t*)colorFrame->data();
    cv::Mat colorMat(ch, cw, CV_8UC3, (void*)colorData);

    int dw = depthFrame->width();
    int dh = depthFrame->height();
    const uint16_t* depthData = (const uint16_t*)depthFrame->data();
    cv::Mat depthMat(dh, dw, CV_16UC1, (void*)depthData);

    // 16비트를 8비트로 스케일해 시각화
    double minVal, maxVal;
    cv::minMaxIdx(depthMat, &minVal, &maxVal);
    cv::Mat depthDisplay;
    depthMat.convertTo(depthDisplay, CV_8U, 255.0 / (maxVal - minVal), - (255.0*minVal)/(maxVal - minVal));
    cv::applyColorMap(depthDisplay, depthDisplay, cv::COLORMAP_JET);

    cv::imshow("Color", colorMat);
    cv::imshow("Depth", depthDisplay);

    if (cv::waitKey(1) == 27)
        break;
}

pipeline.stop();
```

- 이 코드를 컴파일하려면 Visual Studio(또는 다른 C++ 컴파일러)가 필요합니다. `ob_api.h`(Orbbec SDK), OpenCV 헤더를 include하고, 링킹 설정(`OrbbecSDK.lib`, OpenCV 라이브러리)도 해야 합니다.
- Windows에선 CMake를 이용해 프로젝트를 생성하거나, 직접 Visual Studio 솔루션을 설정할 수도 있습니다.

---
## 4. 포인트 클라우드 데이터 활용

컬러·뎁스 프레임을 3D 점들로 변환하려면, Orbbec SDK의 **PointCloudFilter**(Python) / `ob::PointCloudFilter`(C++)를 사용합니다. 뎁스(또는 정렬된 RGB-D) 프레임을 입력으로 주면, XYZ 또는 XYZRGB 포맷의 포인트 클라우드를 얻을 수 있습니다. 하드웨어 정렬(Align) 기능을 통해 컬러와 뎁스가 맞춰진 RGB-D 포인트 클라우드를 생성할 수도 있습니다.

이를 통해 3D 스캐닝, 물체 인식, 로보틱스 등에 응용 가능합니다. 자세한 코드는 [Orbbec SDK v2 문서](https://orbbec.github.io/docs/OrbbecSDKv2/index.html) 또는 Orbbec GitHub 예제(예: PointCloud 샘플)에서 확인하세요.

---
## 5. 빌드·실행 시 자주 겪는 문제와 해결

### 5.1 `cmake` 명령어 인식 실패
- 증상: `cmake` 명령어를 입력하면 "cmake를 인식할 수 없다"라는 오류가 발생.
- 해결: CMake가 설치되어 있지 않거나, 설치되어도 PATH에 등록 안 된 경우입니다.
  - [CMake 다운로드](https://cmake.org/download/) 페이지의 Windows Installer(.msi)로 설치 시, "Add CMake to the system PATH" 옵션을 체크하세요.
  - 설치 후 터미널(혹은 VSCode)을 새로 열어 `cmake --version`으로 동작 확인.

### 5.2 `make`, `nmake`, `msbuild` 등 빌드 명령 인식 실패
- Windows 기본 환경에는 UNIX 계열 `make`가 없습니다. Visual Studio 빌드 도구를 쓰려면 다음 중 하나:
  1. `cmake --build . --config Release` 형태의 명령 사용(Visual Studio 솔루션/프로젝트 자동 인식).
  2. Visual Studio에서 `.sln` 파일을 열고 F5(또는 빌드) 실행.
  3. Visual Studio Developer Command Prompt에서 `nmake`를 사용하려면, CMake 제너레이터를 `-G "NMake Makefiles"`로 지정해야 합니다.
  4. `msbuild`를 쓰려면, Visual Studio가 설치되어 있어야 하며, 명령 프롬프트에 MSBuild가 PATH 등록되어야 합니다.
- Anaconda 환경에서 `conda install -c conda-forge cmake` 한 경우, 해당 conda 환경을 활성화한 터미널에서만 `cmake`가 인식될 수 있습니다. VSCode에서 "Python Interpreter"를 해당 환경으로 설정하고, 새 터미널을 열어 실행하세요.

### 5.3 `pybind11-config --cmakedir` 명령이 PowerShell에서 동작 안 함
- PowerShell의 백틱(`)이나 `$( )` 문법 문제로 인식되지 않을 수 있습니다.
- 방법1: `pybind11-config --cmakedir` 결과값을 직접 복사해 `cmake -Dpybind11_DIR="C:/Users/.../pybind11/share/cmake/pybind11" ..` 식으로 입력.
- 방법2: `$val = pybind11-config --cmakedir` 후 `cmake -Dpybind11_DIR=$val ..` 식으로 실행.

### 5.4 DLL 로드 에러 (Python import 시)
- "DLL load failed" 등의 에러가 뜨면, Orbbec SDK DLL이나 의존 DLL이 PATH에 없을 수 있습니다.
- SDK의 `bin` 폴더(또는 `.dll`들이 있는 폴더)를 PATH에 등록하거나, `.dll`를 Python 스크립트와 동일 폴더에 복사해보세요.

### 5.5 카메라 인식이 안 됨
- USB 포트 전력 부족, 펌웨어 이슈, 다른 UVC 장치 충돌, Windows 업데이트 문제 등.
- Orbbec Viewer에서 장치를 확인해 보세요. Viewer에서도 안 보인다면 하드웨어적 문제나 USB 케이블 문제 가능성이 있습니다.

---
## 6. 요약 & 결론

1. **SDK 설치**: Orbbec SDK(또는 pyorbbecsdk)를 다운로드 후 설치·환경변수 세팅.
2. **CMake/Visual Studio**: Windows 빌드에는 CMake 또는 Visual Studio(Desktop C++ 지원) 필요.
3. **Python 바인딩 빌드**: `venv` 환경에서 CMake로 빌드하고, `cmake --build . --config Release` 등으로 설치.
4. **카메라 연결**: USB 3.0 또는 이더넷(POE). Viewer로 정상 동작 확인.
5. **스트리밍 코드 실행**: Python 또는 C++ 샘플로 컬러/뎁스·포인트 클라우드 확인.
6. **문제 발생 시**: PATH 등록 여부, Visual Studio 개발자 도구 설치 여부, Orbbec Viewer 동작 여부 등을 우선 확인.

이 문서를 차근차근 따라 하면, Windows용 Orbbec Femto Mega 카메라 환경 구성이 가능합니다. 설치·빌드 과정에서 에러가 나오면, 상단의 문제 해결 섹션(5번)을 참고해 확인해보세요. 그래도 해결되지 않는다면, Visual Studio 프로젝트 설정이나 CMake 명령어에 추가적인 설정(제너레이터 지정 등)이 필요한지 점검해야 합니다.

**참조 문서**:
1. Orbbec Python SDK 개요 – 뎁스, 컬러, IR, 포인트 클라우드 등 지원
2. Orbbec SDK Windows 설정 가이드 – UVC 드라이버, OpenCV 의존성 등
3. Orbbec Quick Start 예제 – 최소 코드로 컬러/뎁스 프레임(Python & C++)
4. Orbbec Depth Frame Handling – 프레임 데이터 접근과 NumPy 변환
5. Orbbec Point Cloud Generation – AlignFilter, PointCloudFilter 활용해 RGB-D 클라우드 생성
6. Orbbec SDK GitHub – C++ 샘플(DepthViewer, ColorViewer, PointCloud 등)과 SDK 구성 내용

위 단계를 순서대로 진행하면 Femto Mega 카메라 설치부터 실행, 뎁스·컬러 영상 스트리밍, 포인트 클라우드 생성까지 무리 없이 수행할 수 있을 것입니다. 즐거운 개발 되세요!

